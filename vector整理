#include <iostream>
using namespace std;
#include<vector>

int main()
{
    /*vector构造函数 初始化4种*/
    vector<int> a;          //第一种：a为空，什么也没有
    vector<int> b(4,100);   //第二种：初始化为连续4个100；
                            //输出为100 100 100 100
    vector<int> b1(4);      //会默认为4个0
    vector<int> c(b.begin(),b.end());   //第三种：参数类型为迭代器这种相当于把b的开始到结束给c，输出为100 100 100 100
                                          //也可以这么写：vector<int> c(b.begin()+2,b.end());输出为100 100

    vector<int> d(c);       //以另一个对象做初始化，输出跟c一样

    int e[]={16,2,77,28};
    vector<int> f(e,e+sizeof(e)/sizeof(int));//使用数组做初始化，第一个参数为起始地址，第二个参数为数组末地址
                                            //输出结果跟数组e一样。
    
    return 0;
}



int main ()
{
/******************************************************
*关于vector的
*    size()、iterator、begin()、end()函数
*   用法的笔记
*
******************************************************/

    vector<int> first(4,10);//初始化为4个10
    int i=first.size();//求得first里面共有几个数
    cout<<i<<endl;//会输出4

    first.begin();//返回值的类型是iterator(迭代器)，类似指针
    //接收返回值的时候必须定义 vector<int>::iterator ite这种类型
    vector<int>::iterator ite=first.begin();//返回的是第一个数
    cout<<*ite<<endl;//输出必须加*，否则报错
    ite++;//会接着访问下一个数；也可以ite+=2;当然也可以--ite;
    first.end();
    //基本和first.begin()相同，不过他返回的并不是容器中最后一个数
    ite=first.end();//返回的是最后一个数的下一个，一个未知数
    ite--;
    cout<<*ite<<endl;//输出的是最后一个数
  return 0;
}
