#include <iostream>
#include<string>
using namespace std;

int main()
{
    //string的几种构造函数初始化
    string s0 ("Initial string");//也可以直接这样：s0="Initial string";
    cout<<s0<<endl;//输出：Initial string

    string s1;
    cout<<s1<<endl;//输出为空

    string s2 (s0);//用另一个对象做初始化
    cout<<s2<<endl;//输出：Initial string

    string s3 (s0, 8, 3);//以对象s0字符串下标8开始连续3个赋给s3
    cout<<s3<<endl;//输出：str

    string s4 ("A character sequence");
    cout<<s4<<endl;

    string s5 ("Another character sequence", 12);//以字符串的前12个字符做初始化
    cout<<s5<<endl;//输出：Another char

    string s6 (10, 'x');//以10个x做初始化
    cout<<s6<<endl;//输出：xxxxxxxxxx

    string s7 (10, 42);      //以10个ASCII编码值为42的字符做初始化
    cout<<s7<<endl;//输出：**********

    string s8 (s0.begin(), s0.begin()+7);//以s0的一段做初始化，但不包括s0.begin()+7
    cout<<s8<<endl;//输出：Initial

    return 0;
}

int main()
{
    /**********************************
    *
    *append():给对象尾部追加一些字符
    *
    **********************************/
    string s0("abcd");//s0="abcd"
    s0.append("ef");//s0="abcdef"

    string s1="123456789";
    s0.append(s1,3,5);//从s1的下标3处开始添加5个字符
    cout<<s0<<endl;//s0=abcdef45678

    string s2="111";
    s2.append(3,'2');//追加3个字符2,第二个参数也可以写ASCII值
    cout<<s2<<endl;//s2=111222

    string s3="abcd";
    s3.append(s1.begin()+3,s1.begin()+6);//把s1的一段字符追加上
    cout<<s3<<endl;//s3=abcd456


    return 0;
}

int main()
{
/**********************************************************************

    //assign()函数的几种用法

    string s0="123456";
    string base="abcdefghijklmnopq";

    s0.assign(base);//s0="abcdefgh"

    s0.assign(base,3,2);//s0="de"

    s0.assign("987654321",7);//s0="9876543"

    s0.assign(3,'a');//s0="aaa"

    s0.assign(base.begin()+2,base.end()-5);//s0="cdefghijkl"

***********************************************************************/

/*****************************************************
    //at()函数的用法
    string str ("123456789");
    str.at(5)='0';//修改下标为5的值
    cout<<str<<endl;//str="123450789"
    cout<<str.at(2);//访问下标为2的值，输出为：3
************************************************/

/******************************************************
    //clear(),compare()用法
    string s="12345";
    s.clear();//清空s

    string s1="defghilkjh";
    string s2="abcdefgh";
    s1.compare(s2);//把字符串s1与s2比较，s1大于s2,返回1；s1等于s2,返回0，小于返回-1
    s1.compare(3,4,"abcd");//从s1下标3开始截取连续4个字符与"abcd"比较。
    s1.compare(1,2,s2,2,3);//从s1,s2截取一段比较。
**********************************************************/
/***********************************************************
   
   //copy()函数的笔记
   //size_t copy (char* s, size_t len, size_t pos = 0) const;
    char buf[20];
    string s0(8,'a');
    cout<<s0<<endl;
    string s1;
    s1.resize(10);
    size_t s=s0.copy(buf,5,0);//5代表拷贝5个字符，0代表从下标0开始，buf代表拷贝到的地方
    //这个函数返回值为：拷贝的字符个数
    //注意，我把参数buf改成s1，会报错。
    buf[s]='\0';
    cout<<buf<<endl;//buf="aaaaa"
*******************************************************************/
    return 0;
}

int main()
{
/**************************************************
    //c_str()函数用法:const char* c_str() const;
    char p[20];
    string s("abcdef");
    s.c_str();//函数返回一个指向正规C字符串的指针,但不能用char *p来接收。
    strcpy(p,s.c_str());//只能这么用
    cout<<p<<endl;//字符数组p=abcdef
    const char *b=s.c_str();
    cout<<b<<endl;//b=s
*****************************************************/
/*****************************************************
    //data()的用法：与c_str()函数类似
    //const char* data() const;
    char p0[20];
    string s0="123456";
    strcpy(p0,s0.data());//p0=s0
    const char *a0=s0.data();//a0=s0
    cout<<a0<<endl;
******************************************************/
/*************************************************

    //erase()函数的用法
    string s("123456");
    s.erase(0,2);//s="3456"

    string s1("123456789");
    s1.erase(s1.begin()+1,s1.begin()+3);//s1="1456789"

    string s2("123456789");
    s2.erase(s2.begin());//s2="23456789"
**********************************************/
    return 0;
}
